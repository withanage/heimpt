:mod:`heimpt.heimpt`
====================

.. py:module:: heimpt.heimpt

.. autoapi-nested-parse::

   Main  program which  initializes the  Monograph  Publication Tool , read the configuration from the json file.
   Configuration json file is organized into projects and typesetters. Each project may contain a set of files ordered and
   a ordered subset of typesetters.  Typesetter and file arguments can be specifically configured in a pre-defined order.
   A specific project can be configured to run in a chain modus, which  takes the output of the previous typesetter as the input for
   the current typesetter. If chaining is not set, all the typesetters take the set of files and execute the typesetter and
   generate the output.


   Usage:
       heimpt.py <config_file> [options]
       heimpt.py import omp [-t <template_file>] (<submission_id> ... | -a)

   General Options:
       --interactive      Enable step-by-step interactive mode
       -d --debug         Enable debug output
       -h --help          Display help and quit

   import omp Options:
       -t --template=<template_file>
       -a --all-submissions          Import all submissions of any configured presses

   Example
   --------

   python $BUILD_DIR/heimpt.py $BUILD_DIR/configurations/example.json
   python $BUILD_DIR/heimpt.py import omp 48
   python $BUILD_DIR/heimpt.py import omp -a

   Notes
   -------
   This program may be used to consolidate output files, generated from a certain tool.  But a consolidation tool should
   be set as the last tool in a process chain.



   References
   ----------
   * Web : https://github.com/withanage/heimpt
   * Repository and issue-tracker: https://github.com/withanage/heimpt/issues
   * Licensed under terms of GPL 3  license (LICENSE.md)



Module Contents
---------------

.. data:: __author__
   :annotation: = Dulip Withanage

   

.. data:: SEP
   

   

.. py:class:: MPT

   Bases: :class:`debug.Debuggable`

   MPT Class Object,  which initializes the properties and defines the methods.

   
   .. staticmethod:: read_command_line()

      Reads and  generates a docopt dictionary from the command line parameters.

      Returns
      -------
      docopt : dictionary
        A dictionary, where keys are names of command-line elements  such as  and values are theparsed values of those
        elements.



   
   .. method:: get_module_name(self)

      Reads the name of the module for debugging and logging

      Returns
      -------
      name string
       Name of the Module



   
   .. method:: call_typesetter(self, args)

      Runs  typesetter with given arguments

      Creates the execution path for a typesetter or an application and runs it  as a system process. Output,
      exit-code and  system error codes are captured and returned.


      Parameters
      ----------
      args : list
          application arguments in the correct oder.


      Returns
      -------
      output :str
          system standard output.
      err :str
          system standard error.
      exit_code: str
          system exit_code.

      See Also
      --------
      subprocess.Popen()



   
   .. method:: arguments_parse(self, t_props)

      Reads typesetter properties from json  configuration and create  arguments.


      Parameters
      ----------
      t_props : dictionary
          typesetter properties


      Returns
      -------
      args : list
          application execution path and arguments in the correct oder.



   
   .. method:: create_output_path(self, p, p_id, args, prefix, uid)

      Creates the output path for  the current file

      Output folder is  constructed using project_name, current_time,  sequence number of the current typesetter
      and the sequence number of the current file.

      Parameters
      ---------
      p: dictionary
          json program properties
      p_id:  int
          typesetter id
      args : list
          application arguments in the correct oder.
      prefix: str
          file name prefix  of  the current file
      uid: str
          unique id of the current current typesetter

      Returns
      --------
      True: boolean
          Returns True if the output file is created

      See Also
      --------
      os.makedirs()



   
   .. method:: run_typesetter(self, p, pre_path, pre_out_type, p_id, uid, f_id, f_name, args)

      Creates the temporary output path, calls the typesetter and writes the outtput to the correct path for a
      certain file

      Parameters
      ---------
      p: dictionary
          json program properties
      pre_path: str
          project path of the previous iteration
      pre_out_type : str
          output type of the previous iteration
      p_id:  int
          typesetter id
      uid: str
          unique id of the current current typesetter
      f_id:  int
            sequence number of the current file
      f_name:  str
            name of the current file
      args : list
          application arguments in the correct oder.

      Returns
      --------
      p_path : str
          project output path of the current typesetter
      pf_type : str
          project file type of the current typesetter

      See Also
      --------

      call_typesetter, organize_output



   
   .. method:: typeset_file(self, p, pre_path, pre_out_type, p_id, uid, f_id, f_name)

      Typesets the current file

      Parameters
      ---------
      p: dictionary
          json program properties
      pre_path: str
          project path of the previous iteration
      pre_out_type : str
          output type of the previous iteration
      p_id:  int
          typesetter id
      uid: str
          unique id of the current current typesetter
      f_id:  int
            sequence number of the current file
      f_name:  str
            name of the current file
      args: list
          application arguments in the correct oder.

      Returns
      --------
      p_path : str
          project output path of the current typesetter
      pf_type : str
          project file type of the current typesetter


      See Also
      --------
      run_typesetter



   
   .. method:: typeset_files(self, p, pre_path, pre_out_type, pre_id)

      Typeset all files of a  certain project

      Parameters
      ---------
      p: dictionary
          json program properties
      pre_path: str
          project path of the previously executed typesetter
      pre_out_type: str
          project file type of the previously executed typesetter
      pre_id :int
          sequence number of the previously executed file

      Returns
      --------
      p_path : str
          project output path of the current typesetter
      pf_type : str
          project file type of the current typesetter


      See Also
      --------
      typeset_file



   
   .. method:: typeset_project(self, p)

      Typesets a certain project

      Parameters
      ---------
      p: dictionary
          json program properties

      Returns
      --------
      True: boolean
          Returns True, if  all the typesetters in project has run successfully.


      See Also
      --------
      typeset_files



   
   .. method:: typeset_all_projects(self)

      Typeset all projects defined in the json file

      Returns
      --------
      True: boolean
          Returns True, if the  all the typesetters in project run

      See Also
      --------
      typeset_project



   
   .. method:: organize_output(self, p, p_id, prefix, f_id, uid, args)

      Copy the temporary results into the  final project path

      This method reads the temporary results of the current typesetter step and copies them in to the correct output
      folder. Output folder is  constructed using project_name, current_time,  sequence number of the current typesetter
      and the sequence number of the current file.  Customized tool specific actions are also defined and handled here.



      Parameters
      ------------
      p: dict
          json program properties
      p_id:  int
          typesetter id
      prefix: str
          file name prefix  of  the current file
      f_id:  int
            sequence number of the current file
      uid: str
          unique id of the current current typesetter
      args: bytearray
          tool parameters , executable file is first element
      Returns
      --------
      project_path: str
          Final path for the current file


      See Also
      --------
      create_merged_file, gv.create_dirs_recursive



   
   .. method:: create_merged_file(self, p, p_id, project_path, t_path)

      Create a combined file from a set of input files

      Parameters
      ------------
      p: dict
          json program properties
      p_id:  int
          typesetter id
      t_path : str
          temporary  output directory
      project_path : str
          system path to be created

      See Also
      --------
      create_named_file()




   
   .. method:: create_named_file(self, p, p_id, p_path, t_path)

      Copy  unique file name to a named file

      p: dict
          json program properties
      p_id:  int
          typesetter id
      t_path : str
          temporary  output directory
      p_path : str
          output directory for the current typesetter



   
   .. method:: run_modules(self)

      Run MPT in module mode



   
   .. method:: check_applications(self)

      Check if program binaries are available 




.. function:: main()

   main method, initializes the  Monograph  Publication Tool and  runs the configuration

   See Also
   --------
   run


